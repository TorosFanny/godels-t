Proof of some theorems about GÃ¶del's System T:
  progress, preservation, and termination.
-Michael Sullivan (mjsulliv@cs.cmu.edu)

We use the strategy for representing substitutions and renamings presented in:
 http://thread.gmane.org/gmane.comp.lang.agda/3259
It is kind of unpleasant. There are a lot of lemmas we need to prove,
and treating renaming and substitution completely seperately is ugly.
The first reply to the post linked above presents a refinement that
avoids these problems, but at the cost of moving weakening into
every substitution function, where we can't reason about it.
The vast majority of my time spent on this proof was fighting with
substitutions so that I could prove combine-subst-noob.

This uses an intrinsic representation, where the typing derivation
is intrinsic to the syntax datatype. This means that the
substitution lemma is built into the definition of substitution and
preservation is built into the dynamic semantics.

The dynamic semantics are non-deterministic and call-by-name. This
made the HT proof easier.

Some inspiration taken from
https://github.com/robsimmons/agda-lib/blob/pattern-0/GoedelT.agda

This relies on Rob Simmons' alternate Agda standard library:
https://github.com/robsimmons/agda-lib

This is my first real development in agda, so that is my excuse
for any terribleness. There are probably a bunch of ways to clean
things up and reduce some code duplication.

Source tree overview:
 T.agda: this file; contains the syntax (and intrinstically the
         static semantics), denotational semantics, definition of
         substitution (and intrinstically the substitution lemma),
         and dynamic semantics (intrinstically preservation).
 Progress.agda: statement and proof of progress
 SubstTheory.agda: a bunch of theorems about substitution and
                   renaming that are needed for the HT proof
 DynTheory.agda: some simple lemmas about the dynamic semantics
 HT.agda: proof of hereditary termination
 DenotCommutes.agda: incomplete proof that the denotational
                     semantics commute with the dynamics
 Examples.agda: some simple example T programs
 All.agda: just includes everything else to make sure it all works

I think I am using the module system stupidly.
